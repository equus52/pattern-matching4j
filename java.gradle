// called from each project applying java plugin
apply plugin: 'java'

// encoding settings
def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
javadoc { options.encoding = defaultEncoding }

// Java version settings
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion
tasks.withType(AbstractCompile) { options.bootClasspath = "${System.getProperty("java.home")}/lib/rt.jar" }

// jar settings
jar {
  manifest {
    attributes(
        "Implementation-Title"      : project.name,
        "Implementation-Version"    : productVersion
        )
  }
}

// sources jar settings
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  manifest {
    attributes(
        "Implementation-Title"      : project.name,
        "Implementation-Version"    : productVersion
        )
  }
}
artifacts { archives sourcesJar }

// test common dependencies settings
dependencies {
  libraries.test.each { key, value -> testCompile value }
}

// local dependencies settings
dependencies {
  compile fileTree(dir: 'lib/compile', include: '**/*.jar', exclude: '**/*-sources.jar')
  runtime fileTree(dir: 'lib/runtime', include: '**/*.jar', exclude: '**/*-sources.jar')
  testCompile fileTree(dir: 'lib/testCompile', include: '**/*.jar', exclude: '**/*-sources.jar')
}

// provided implements
sourceSets {
  main.compileClasspath += configurations.provided
  test.compileClasspath += configurations.provided
  test.runtimeClasspath += configurations.provided
}

// buildCompile implements
sourceSets {
  main.compileClasspath += configurations.buildCompile
  test.compileClasspath += configurations.buildCompile
}
